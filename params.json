{"name":"GWLST","tagline":"Groovy WebLogic Scripting Tool","body":"## Welcome to Groovy WebLogic Scripting Tool\r\nGWLST is the Groovy cousin of \r\n[Oracle WebLogic Scripting Tool (WLST)](http://docs.oracle.com/cd/E24329_01/web.1211/e24491/toc.htm),\r\nused to configure and manage WebLogic Server domains, servers and services.\r\n\r\n# WLST, JMX and MBeans\r\nWLST is really two partially overlapping tools with a joint interface: \r\n* In \"offline mode\", it manipulates a domain directory directly on a local file system.\r\n* In \"online mode\", it connects to a running WebLogic Server over [JMX](http://download.oracle.com/javase/7/docs/technotes/guides/jmx/index.html).\r\n\r\nWebLogic Server exposes its configuration and management interfaces as\r\n[WebLogic Server MBeans](http://docs.oracle.com/cd/E24329_01/apirefs.1211/e24403/core/index.html)\r\nthat are accessible remotely over JMX. The WebLogic Console exposes a subset of this interface; a JMX client can access anything that can be accessed through WebLogic Console and more.\r\n\r\nThe great irony of Java Management Extensions (JMX) is that the Java programming language is poorly suited for writing a JMX client application because it lacks the dynamic language features to hide the fact that the remote MBean is not an ordinary object. Whereas WLST Online scripts are not pretty, they are still often less painful to write than \r\n[developing custom management utilities with JMX in Java](http://docs.oracle.com/cd/E24329_01/web.1211/e24415/toc.htm).\r\n\r\n# GWLST and Groovy\r\nGWLST is a pure JMX client, covering only the \"online\" aspect of WLST, but it does this more elegantly than either Java or WLST.\r\n\r\nWhereas WLST is a module on top if [Jython](http://www.jython.org/), GWLST is a \r\n[DSL](http://martinfowler.com/bliki/DomainSpecificLanguage.html) \r\nembedded in the [Groovy](http://groovy.codehaus.org/) programming language. Because Groovy compiles to Java Byte Code and runs on the JVM, it integrated seamlessly with other code written in Java.\r\n\r\nGroovy has dynamic language features allowing classes to \"pretend\" having properties and methods. The caller (written in Groovy) can therefore access MBeans as if they were ordinary objects rather than using the verbose reflection style. This is demonstrated in the simple [GroovyMBean](http://groovy.codehaus.org/Groovy+and+JMX), but GWLST takes it further by adding navigation (an MBean returns another MBean) and WebLogic metadata.\r\n\r\n## Summary\r\n* GWLST can be used as a scripting engine like WLST Online\r\n* GWLST can be used as a library classes written in Groovy that are compiled and run seamlessly on the JVM\r\n* GWLST scripts are typically a fraction of the length or either its counterpart written in WLST or Java\r\n* GWLST is so expressive that it is useful to WebLogic administrators \"on the fly\" as an alternative to otherwise repetitive actions through the WebLogic Console","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}